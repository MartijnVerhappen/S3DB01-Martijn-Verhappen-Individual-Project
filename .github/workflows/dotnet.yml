name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore "ShopAPI/ShopAPI.sln"

    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Run SonarCloud Begin
      run: |
        dotnet-sonarscanner begin \
        /k:"MartijnVerhappen_S3DB01-Martijn-Verhappen-Individual-Project" \
        /o:"martijnverhappen" \
        /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
        /d:sonar.coverageReportPaths="coverage-report/SonarQube.xml"
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Build project
      run: dotnet build "ShopAPI/ShopAPI.sln" --no-restore

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Run Tests and Collect Coverage
      run: dotnet test "ShopAPI/Unit tests/UnitTests.csproj" --no-build --collect:"XPlat Code Coverage" --logger:"trx"

    - name: Create coverage report directory
      run: mkdir -p coverage-report

    - name: Generate coverage report with reportgenerator
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.0
        reportgenerator "-reports:./ShopAPI/Unit tests/**/coverage.cobertura.xml" "-targetdir:coverage-report" -reporttypes:SonarQube
        
    - name: List coverage-report directory
      run: |
       ls -R coverage-report

    - name: Run SonarScanner End
      run: |
        dotnet-sonarscanner end \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/web-shop-api:latest ./ShopAPI

    - name: Push Docker image to DockerHub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/web-shop-api:latest

    - name: Deploy with Watchtower
      run: |
        docker run -d \
          --name watchtower \
          -v /var/run/docker.sock:/var/run/docker.sock \
          containrrr/watchtower \
          --interval 300 \
          --cleanup \
          ${{ secrets.DOCKER_USERNAME }}/web-shop-api
